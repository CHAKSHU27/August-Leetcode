/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int pathSum(TreeNode root, int sum) {
        HashMap<Integer, Integer> presum = new HashMap<>();
        presum.put(0, 1);
        return calcSum(0, sum, root, presum);
    }
    private int calcSum(int currSum, int targetSum, TreeNode root, HashMap<Integer, Integer> presum){
        if(root==null)
            return 0;
        currSum += root.val;
        int res = presum.getOrDefault(currSum-targetSum, 0);
        presum.put(currSum, presum.getOrDefault(currSum ,0)+1);
        
        res += calcSum(currSum, targetSum, root.left, presum) + calcSum(currSum, targetSum, root.right, presum);
        
        presum.put(currSum, presum.get(currSum)-1);
        return res;
    }
}
